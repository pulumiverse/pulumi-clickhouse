// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clickhouse

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-clickhouse/sdk/go/clickhouse/internal"
)

// The provider type for the clickhouse package. By default, resources use package-wide configuration
// settings, however an explicit `Provider` instance may be created and passed during resource
// construction to achieve fine-grained programmatic control over provider settings. See the
// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
type Provider struct {
	pulumi.ProviderResourceState

	// API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
	// `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
	// want to run against.
	ApiUrl pulumi.StringPtrOutput `pulumi:"apiUrl"`
	// ID of the organization the provider will create services under. Alternatively, can be configured using the
	// `CLICKHOUSE_ORG_ID` environment variable.
	OrganizationId pulumi.StringPtrOutput `pulumi:"organizationId"`
	// Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
	// `CLICKHOUSE_TOKEN_KEY` environment variable.
	TokenKey pulumi.StringPtrOutput `pulumi:"tokenKey"`
	// Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
	// `CLICKHOUSE_TOKEN_SECRET` environment variable.
	TokenSecret pulumi.StringPtrOutput `pulumi:"tokenSecret"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		args = &ProviderArgs{}
	}

	if args.TokenSecret != nil {
		args.TokenSecret = pulumi.ToSecret(args.TokenSecret).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"tokenSecret",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:clickhouse", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	// API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
	// `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
	// want to run against.
	ApiUrl *string `pulumi:"apiUrl"`
	// ID of the organization the provider will create services under. Alternatively, can be configured using the
	// `CLICKHOUSE_ORG_ID` environment variable.
	OrganizationId *string `pulumi:"organizationId"`
	// Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
	// `CLICKHOUSE_TOKEN_KEY` environment variable.
	TokenKey *string `pulumi:"tokenKey"`
	// Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
	// `CLICKHOUSE_TOKEN_SECRET` environment variable.
	TokenSecret *string `pulumi:"tokenSecret"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	// API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
	// `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
	// want to run against.
	ApiUrl pulumi.StringPtrInput
	// ID of the organization the provider will create services under. Alternatively, can be configured using the
	// `CLICKHOUSE_ORG_ID` environment variable.
	OrganizationId pulumi.StringPtrInput
	// Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
	// `CLICKHOUSE_TOKEN_KEY` environment variable.
	TokenKey pulumi.StringPtrInput
	// Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
	// `CLICKHOUSE_TOKEN_SECRET` environment variable.
	TokenSecret pulumi.StringPtrInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

// API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
// `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
// want to run against.
func (o ProviderOutput) ApiUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.ApiUrl }).(pulumi.StringPtrOutput)
}

// ID of the organization the provider will create services under. Alternatively, can be configured using the
// `CLICKHOUSE_ORG_ID` environment variable.
func (o ProviderOutput) OrganizationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.OrganizationId }).(pulumi.StringPtrOutput)
}

// Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
// `CLICKHOUSE_TOKEN_KEY` environment variable.
func (o ProviderOutput) TokenKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.TokenKey }).(pulumi.StringPtrOutput)
}

// Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
// `CLICKHOUSE_TOKEN_SECRET` environment variable.
func (o ProviderOutput) TokenSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringPtrOutput { return v.TokenSecret }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
}
