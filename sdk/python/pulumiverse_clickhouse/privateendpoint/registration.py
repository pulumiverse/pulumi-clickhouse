# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['RegistrationArgs', 'Registration']

@pulumi.input_type
class RegistrationArgs:
    def __init__(__self__, *,
                 cloud_provider: pulumi.Input[str],
                 private_endpoint_id: pulumi.Input[str],
                 region: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Registration resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the private endpoint ID
        :param pulumi.Input[str] private_endpoint_id: ID of the private endpoint (replaces deprecated attribute `id`)
        :param pulumi.Input[str] region: Region of the private endpoint
        :param pulumi.Input[str] description: Description of the private endpoint
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "region", region)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Input[str]:
        """
        Cloud provider of the private endpoint ID
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> pulumi.Input[str]:
        """
        ID of the private endpoint (replaces deprecated attribute `id`)
        """
        return pulumi.get(self, "private_endpoint_id")

    @private_endpoint_id.setter
    def private_endpoint_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_endpoint_id", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region of the private endpoint
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the private endpoint
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)


@pulumi.input_type
class _RegistrationState:
    def __init__(__self__, *,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Registration resources.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the private endpoint ID
        :param pulumi.Input[str] description: Description of the private endpoint
        :param pulumi.Input[str] private_endpoint_id: ID of the private endpoint (replaces deprecated attribute `id`)
        :param pulumi.Input[str] region: Region of the private endpoint
        """
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider of the private endpoint ID
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the private endpoint
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the private endpoint (replaces deprecated attribute `id`)
        """
        return pulumi.get(self, "private_endpoint_id")

    @private_endpoint_id.setter
    def private_endpoint_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_endpoint_id", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region of the private endpoint
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)


class Registration(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ClickHouse Cloud provides the ability to connect your services to your cloud virtual network through a feature named *Private Link*.

        You can use the *private_endpoint_registration* resource to set up the private link feature.

        Check the [docs](https://clickhouse.com/docs/en/cloud/security/private-link-overview) for more details on *private link*.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_clickhouse as clickhouse

        endpoint = clickhouse.private_endpoint.Registration("endpoint",
            cloud_provider="aws",
            description="Private Link from VPC foo",
            private_endpoint_id="vpce-...",
            region="us-west-2")
        ```

        ## Import

        Endpoint Attachments can be imported by specifying the Cloud provider private endpoint ID

        For example for AWS you could run:

        ```sh
        $ pulumi import clickhouse:PrivateEndpoint/registration:Registration example vpce-xxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the private endpoint ID
        :param pulumi.Input[str] description: Description of the private endpoint
        :param pulumi.Input[str] private_endpoint_id: ID of the private endpoint (replaces deprecated attribute `id`)
        :param pulumi.Input[str] region: Region of the private endpoint
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RegistrationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ClickHouse Cloud provides the ability to connect your services to your cloud virtual network through a feature named *Private Link*.

        You can use the *private_endpoint_registration* resource to set up the private link feature.

        Check the [docs](https://clickhouse.com/docs/en/cloud/security/private-link-overview) for more details on *private link*.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_clickhouse as clickhouse

        endpoint = clickhouse.private_endpoint.Registration("endpoint",
            cloud_provider="aws",
            description="Private Link from VPC foo",
            private_endpoint_id="vpce-...",
            region="us-west-2")
        ```

        ## Import

        Endpoint Attachments can be imported by specifying the Cloud provider private endpoint ID

        For example for AWS you could run:

        ```sh
        $ pulumi import clickhouse:PrivateEndpoint/registration:Registration example vpce-xxxxxx
        ```

        :param str resource_name: The name of the resource.
        :param RegistrationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RegistrationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 private_endpoint_id: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RegistrationArgs.__new__(RegistrationArgs)

            if cloud_provider is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_provider'")
            __props__.__dict__["cloud_provider"] = cloud_provider
            __props__.__dict__["description"] = description
            if private_endpoint_id is None and not opts.urn:
                raise TypeError("Missing required property 'private_endpoint_id'")
            __props__.__dict__["private_endpoint_id"] = private_endpoint_id
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
        super(Registration, __self__).__init__(
            'clickhouse:PrivateEndpoint/registration:Registration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            private_endpoint_id: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None) -> 'Registration':
        """
        Get an existing Registration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider of the private endpoint ID
        :param pulumi.Input[str] description: Description of the private endpoint
        :param pulumi.Input[str] private_endpoint_id: ID of the private endpoint (replaces deprecated attribute `id`)
        :param pulumi.Input[str] region: Region of the private endpoint
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RegistrationState.__new__(_RegistrationState)

        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["description"] = description
        __props__.__dict__["private_endpoint_id"] = private_endpoint_id
        __props__.__dict__["region"] = region
        return Registration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[str]:
        """
        Cloud provider of the private endpoint ID
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the private endpoint
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> pulumi.Output[str]:
        """
        ID of the private endpoint (replaces deprecated attribute `id`)
        """
        return pulumi.get(self, "private_endpoint_id")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Region of the private endpoint
        """
        return pulumi.get(self, "region")

