# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ServiceArgs', 'Service']

@pulumi.input_type
class ServiceArgs:
    def __init__(__self__, *,
                 cloud_provider: pulumi.Input[str],
                 ip_accesses: pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]],
                 region: pulumi.Input[str],
                 tier: pulumi.Input[str],
                 double_sha1_password_hash: Optional[pulumi.Input[str]] = None,
                 encryption_assumed_role_identifier: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 idle_scaling: Optional[pulumi.Input[bool]] = None,
                 idle_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 max_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 min_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hash: Optional[pulumi.Input[str]] = None,
                 private_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a Service resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]] ip_accesses: List of IP addresses allowed to access the service.
        :param pulumi.Input[str] region: Region within the cloud provider in which the service is deployed in.
        :param pulumi.Input[str] tier: Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.
        :param pulumi.Input[str] double_sha1_password_hash: Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.
        :param pulumi.Input[str] encryption_assumed_role_identifier: Custom role identifier arn
        :param pulumi.Input[str] encryption_key: Custom encryption key arn
        :param pulumi.Input[bool] idle_scaling: When set to true the service is allowed to scale down to zero when idle. Always true for development services. Configurable only for 'production' services.
        :param pulumi.Input[int] idle_timeout_minutes: Set minimum idling timeout (in minutes). Available only for 'production' services. Must be greater than or equal to 5 minutes.
        :param pulumi.Input[int] max_total_memory_gb: Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
        :param pulumi.Input[int] min_total_memory_gb: Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
        :param pulumi.Input[str] name: User defined identifier for the service.
        :param pulumi.Input[str] password: Password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input[str] password_hash: SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_endpoint_ids: List of private endpoint IDs
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "ip_accesses", ip_accesses)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "tier", tier)
        if double_sha1_password_hash is not None:
            pulumi.set(__self__, "double_sha1_password_hash", double_sha1_password_hash)
        if encryption_assumed_role_identifier is not None:
            pulumi.set(__self__, "encryption_assumed_role_identifier", encryption_assumed_role_identifier)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if idle_scaling is not None:
            pulumi.set(__self__, "idle_scaling", idle_scaling)
        if idle_timeout_minutes is not None:
            pulumi.set(__self__, "idle_timeout_minutes", idle_timeout_minutes)
        if max_total_memory_gb is not None:
            pulumi.set(__self__, "max_total_memory_gb", max_total_memory_gb)
        if min_total_memory_gb is not None:
            pulumi.set(__self__, "min_total_memory_gb", min_total_memory_gb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_hash is not None:
            pulumi.set(__self__, "password_hash", password_hash)
        if private_endpoint_ids is not None:
            pulumi.set(__self__, "private_endpoint_ids", private_endpoint_ids)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Input[str]:
        """
        Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="ipAccesses")
    def ip_accesses(self) -> pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]]:
        """
        List of IP addresses allowed to access the service.
        """
        return pulumi.get(self, "ip_accesses")

    @ip_accesses.setter
    def ip_accesses(self, value: pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]]):
        pulumi.set(self, "ip_accesses", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Region within the cloud provider in which the service is deployed in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tier(self) -> pulumi.Input[str]:
        """
        Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: pulumi.Input[str]):
        pulumi.set(self, "tier", value)

    @property
    @pulumi.getter(name="doubleSha1PasswordHash")
    def double_sha1_password_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.
        """
        return pulumi.get(self, "double_sha1_password_hash")

    @double_sha1_password_hash.setter
    def double_sha1_password_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "double_sha1_password_hash", value)

    @property
    @pulumi.getter(name="encryptionAssumedRoleIdentifier")
    def encryption_assumed_role_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Custom role identifier arn
        """
        return pulumi.get(self, "encryption_assumed_role_identifier")

    @encryption_assumed_role_identifier.setter
    def encryption_assumed_role_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_assumed_role_identifier", value)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        Custom encryption key arn
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter(name="idleScaling")
    def idle_scaling(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true the service is allowed to scale down to zero when idle. Always true for development services. Configurable only for 'production' services.
        """
        return pulumi.get(self, "idle_scaling")

    @idle_scaling.setter
    def idle_scaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "idle_scaling", value)

    @property
    @pulumi.getter(name="idleTimeoutMinutes")
    def idle_timeout_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set minimum idling timeout (in minutes). Available only for 'production' services. Must be greater than or equal to 5 minutes.
        """
        return pulumi.get(self, "idle_timeout_minutes")

    @idle_timeout_minutes.setter
    def idle_timeout_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout_minutes", value)

    @property
    @pulumi.getter(name="maxTotalMemoryGb")
    def max_total_memory_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
        """
        return pulumi.get(self, "max_total_memory_gb")

    @max_total_memory_gb.setter
    def max_total_memory_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_total_memory_gb", value)

    @property
    @pulumi.getter(name="minTotalMemoryGb")
    def min_total_memory_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
        """
        return pulumi.get(self, "min_total_memory_gb")

    @min_total_memory_gb.setter
    def min_total_memory_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_total_memory_gb", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User defined identifier for the service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the default user. One of either `password` or `password_hash` must be specified.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordHash")
    def password_hash(self) -> Optional[pulumi.Input[str]]:
        """
        SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.
        """
        return pulumi.get(self, "password_hash")

    @password_hash.setter
    def password_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_hash", value)

    @property
    @pulumi.getter(name="privateEndpointIds")
    def private_endpoint_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of private endpoint IDs
        """
        return pulumi.get(self, "private_endpoint_ids")

    @private_endpoint_ids.setter
    def private_endpoint_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_endpoint_ids", value)


@pulumi.input_type
class _ServiceState:
    def __init__(__self__, *,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 double_sha1_password_hash: Optional[pulumi.Input[str]] = None,
                 encryption_assumed_role_identifier: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceEndpointArgs']]]] = None,
                 iam_role: Optional[pulumi.Input[str]] = None,
                 idle_scaling: Optional[pulumi.Input[bool]] = None,
                 idle_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 ip_accesses: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]]] = None,
                 last_updated: Optional[pulumi.Input[str]] = None,
                 max_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 min_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hash: Optional[pulumi.Input[str]] = None,
                 private_endpoint_config: Optional[pulumi.Input['ServicePrivateEndpointConfigArgs']] = None,
                 private_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Service resources.
        :param pulumi.Input[str] cloud_provider: Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.
        :param pulumi.Input[str] double_sha1_password_hash: Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.
        :param pulumi.Input[str] encryption_assumed_role_identifier: Custom role identifier arn
        :param pulumi.Input[str] encryption_key: Custom encryption key arn
        :param pulumi.Input[Sequence[pulumi.Input['ServiceEndpointArgs']]] endpoints: List of public endpoints.
        :param pulumi.Input[str] iam_role: IAM role used for accessing objects in s3.
        :param pulumi.Input[bool] idle_scaling: When set to true the service is allowed to scale down to zero when idle. Always true for development services. Configurable only for 'production' services.
        :param pulumi.Input[int] idle_timeout_minutes: Set minimum idling timeout (in minutes). Available only for 'production' services. Must be greater than or equal to 5 minutes.
        :param pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]] ip_accesses: List of IP addresses allowed to access the service.
        :param pulumi.Input[int] max_total_memory_gb: Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
        :param pulumi.Input[int] min_total_memory_gb: Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
        :param pulumi.Input[str] name: User defined identifier for the service.
        :param pulumi.Input[str] password: Password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input[str] password_hash: SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input['ServicePrivateEndpointConfigArgs'] private_endpoint_config: Service config for private endpoints
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_endpoint_ids: List of private endpoint IDs
        :param pulumi.Input[str] region: Region within the cloud provider in which the service is deployed in.
        :param pulumi.Input[str] tier: Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.
        """
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if double_sha1_password_hash is not None:
            pulumi.set(__self__, "double_sha1_password_hash", double_sha1_password_hash)
        if encryption_assumed_role_identifier is not None:
            pulumi.set(__self__, "encryption_assumed_role_identifier", encryption_assumed_role_identifier)
        if encryption_key is not None:
            pulumi.set(__self__, "encryption_key", encryption_key)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if iam_role is not None:
            pulumi.set(__self__, "iam_role", iam_role)
        if idle_scaling is not None:
            pulumi.set(__self__, "idle_scaling", idle_scaling)
        if idle_timeout_minutes is not None:
            pulumi.set(__self__, "idle_timeout_minutes", idle_timeout_minutes)
        if ip_accesses is not None:
            pulumi.set(__self__, "ip_accesses", ip_accesses)
        if last_updated is not None:
            pulumi.set(__self__, "last_updated", last_updated)
        if max_total_memory_gb is not None:
            pulumi.set(__self__, "max_total_memory_gb", max_total_memory_gb)
        if min_total_memory_gb is not None:
            pulumi.set(__self__, "min_total_memory_gb", min_total_memory_gb)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_hash is not None:
            pulumi.set(__self__, "password_hash", password_hash)
        if private_endpoint_config is not None:
            warnings.warn("""Please use the `private_endpoint_get_config` data source instead.""", DeprecationWarning)
            pulumi.log.warn("""private_endpoint_config is deprecated: Please use the `private_endpoint_get_config` data source instead.""")
        if private_endpoint_config is not None:
            pulumi.set(__self__, "private_endpoint_config", private_endpoint_config)
        if private_endpoint_ids is not None:
            pulumi.set(__self__, "private_endpoint_ids", private_endpoint_ids)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tier is not None:
            pulumi.set(__self__, "tier", tier)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter(name="doubleSha1PasswordHash")
    def double_sha1_password_hash(self) -> Optional[pulumi.Input[str]]:
        """
        Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.
        """
        return pulumi.get(self, "double_sha1_password_hash")

    @double_sha1_password_hash.setter
    def double_sha1_password_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "double_sha1_password_hash", value)

    @property
    @pulumi.getter(name="encryptionAssumedRoleIdentifier")
    def encryption_assumed_role_identifier(self) -> Optional[pulumi.Input[str]]:
        """
        Custom role identifier arn
        """
        return pulumi.get(self, "encryption_assumed_role_identifier")

    @encryption_assumed_role_identifier.setter
    def encryption_assumed_role_identifier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_assumed_role_identifier", value)

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> Optional[pulumi.Input[str]]:
        """
        Custom encryption key arn
        """
        return pulumi.get(self, "encryption_key")

    @encryption_key.setter
    def encryption_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_key", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceEndpointArgs']]]]:
        """
        List of public endpoints.
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceEndpointArgs']]]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter(name="iamRole")
    def iam_role(self) -> Optional[pulumi.Input[str]]:
        """
        IAM role used for accessing objects in s3.
        """
        return pulumi.get(self, "iam_role")

    @iam_role.setter
    def iam_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "iam_role", value)

    @property
    @pulumi.getter(name="idleScaling")
    def idle_scaling(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true the service is allowed to scale down to zero when idle. Always true for development services. Configurable only for 'production' services.
        """
        return pulumi.get(self, "idle_scaling")

    @idle_scaling.setter
    def idle_scaling(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "idle_scaling", value)

    @property
    @pulumi.getter(name="idleTimeoutMinutes")
    def idle_timeout_minutes(self) -> Optional[pulumi.Input[int]]:
        """
        Set minimum idling timeout (in minutes). Available only for 'production' services. Must be greater than or equal to 5 minutes.
        """
        return pulumi.get(self, "idle_timeout_minutes")

    @idle_timeout_minutes.setter
    def idle_timeout_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "idle_timeout_minutes", value)

    @property
    @pulumi.getter(name="ipAccesses")
    def ip_accesses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]]]:
        """
        List of IP addresses allowed to access the service.
        """
        return pulumi.get(self, "ip_accesses")

    @ip_accesses.setter
    def ip_accesses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ServiceIpAccessArgs']]]]):
        pulumi.set(self, "ip_accesses", value)

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_updated")

    @last_updated.setter
    def last_updated(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_updated", value)

    @property
    @pulumi.getter(name="maxTotalMemoryGb")
    def max_total_memory_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
        """
        return pulumi.get(self, "max_total_memory_gb")

    @max_total_memory_gb.setter
    def max_total_memory_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_total_memory_gb", value)

    @property
    @pulumi.getter(name="minTotalMemoryGb")
    def min_total_memory_gb(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
        """
        return pulumi.get(self, "min_total_memory_gb")

    @min_total_memory_gb.setter
    def min_total_memory_gb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_total_memory_gb", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User defined identifier for the service.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for the default user. One of either `password` or `password_hash` must be specified.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordHash")
    def password_hash(self) -> Optional[pulumi.Input[str]]:
        """
        SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.
        """
        return pulumi.get(self, "password_hash")

    @password_hash.setter
    def password_hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_hash", value)

    @property
    @pulumi.getter(name="privateEndpointConfig")
    @_utilities.deprecated("""Please use the `private_endpoint_get_config` data source instead.""")
    def private_endpoint_config(self) -> Optional[pulumi.Input['ServicePrivateEndpointConfigArgs']]:
        """
        Service config for private endpoints
        """
        return pulumi.get(self, "private_endpoint_config")

    @private_endpoint_config.setter
    def private_endpoint_config(self, value: Optional[pulumi.Input['ServicePrivateEndpointConfigArgs']]):
        pulumi.set(self, "private_endpoint_config", value)

    @property
    @pulumi.getter(name="privateEndpointIds")
    def private_endpoint_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of private endpoint IDs
        """
        return pulumi.get(self, "private_endpoint_ids")

    @private_endpoint_ids.setter
    def private_endpoint_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "private_endpoint_ids", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region within the cloud provider in which the service is deployed in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def tier(self) -> Optional[pulumi.Input[str]]:
        """
        Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.
        """
        return pulumi.get(self, "tier")

    @tier.setter
    def tier(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tier", value)


class Service(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 double_sha1_password_hash: Optional[pulumi.Input[str]] = None,
                 encryption_assumed_role_identifier: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 idle_scaling: Optional[pulumi.Input[bool]] = None,
                 idle_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 ip_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceIpAccessArgs']]]]] = None,
                 max_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 min_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hash: Optional[pulumi.Input[str]] = None,
                 private_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.
        :param pulumi.Input[str] double_sha1_password_hash: Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.
        :param pulumi.Input[str] encryption_assumed_role_identifier: Custom role identifier arn
        :param pulumi.Input[str] encryption_key: Custom encryption key arn
        :param pulumi.Input[bool] idle_scaling: When set to true the service is allowed to scale down to zero when idle. Always true for development services. Configurable only for 'production' services.
        :param pulumi.Input[int] idle_timeout_minutes: Set minimum idling timeout (in minutes). Available only for 'production' services. Must be greater than or equal to 5 minutes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceIpAccessArgs']]]] ip_accesses: List of IP addresses allowed to access the service.
        :param pulumi.Input[int] max_total_memory_gb: Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
        :param pulumi.Input[int] min_total_memory_gb: Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
        :param pulumi.Input[str] name: User defined identifier for the service.
        :param pulumi.Input[str] password: Password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input[str] password_hash: SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_endpoint_ids: List of private endpoint IDs
        :param pulumi.Input[str] region: Region within the cloud provider in which the service is deployed in.
        :param pulumi.Input[str] tier: Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Service resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ServiceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 double_sha1_password_hash: Optional[pulumi.Input[str]] = None,
                 encryption_assumed_role_identifier: Optional[pulumi.Input[str]] = None,
                 encryption_key: Optional[pulumi.Input[str]] = None,
                 idle_scaling: Optional[pulumi.Input[bool]] = None,
                 idle_timeout_minutes: Optional[pulumi.Input[int]] = None,
                 ip_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceIpAccessArgs']]]]] = None,
                 max_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 min_total_memory_gb: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hash: Optional[pulumi.Input[str]] = None,
                 private_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tier: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceArgs.__new__(ServiceArgs)

            if cloud_provider is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_provider'")
            __props__.__dict__["cloud_provider"] = cloud_provider
            __props__.__dict__["double_sha1_password_hash"] = None if double_sha1_password_hash is None else pulumi.Output.secret(double_sha1_password_hash)
            __props__.__dict__["encryption_assumed_role_identifier"] = encryption_assumed_role_identifier
            __props__.__dict__["encryption_key"] = encryption_key
            __props__.__dict__["idle_scaling"] = idle_scaling
            __props__.__dict__["idle_timeout_minutes"] = idle_timeout_minutes
            if ip_accesses is None and not opts.urn:
                raise TypeError("Missing required property 'ip_accesses'")
            __props__.__dict__["ip_accesses"] = ip_accesses
            __props__.__dict__["max_total_memory_gb"] = max_total_memory_gb
            __props__.__dict__["min_total_memory_gb"] = min_total_memory_gb
            __props__.__dict__["name"] = name
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["password_hash"] = None if password_hash is None else pulumi.Output.secret(password_hash)
            __props__.__dict__["private_endpoint_ids"] = private_endpoint_ids
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if tier is None and not opts.urn:
                raise TypeError("Missing required property 'tier'")
            __props__.__dict__["tier"] = tier
            __props__.__dict__["endpoints"] = None
            __props__.__dict__["iam_role"] = None
            __props__.__dict__["last_updated"] = None
            __props__.__dict__["private_endpoint_config"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["doubleSha1PasswordHash", "password", "passwordHash"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Service, __self__).__init__(
            'clickhouse:index/service:Service',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            double_sha1_password_hash: Optional[pulumi.Input[str]] = None,
            encryption_assumed_role_identifier: Optional[pulumi.Input[str]] = None,
            encryption_key: Optional[pulumi.Input[str]] = None,
            endpoints: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceEndpointArgs']]]]] = None,
            iam_role: Optional[pulumi.Input[str]] = None,
            idle_scaling: Optional[pulumi.Input[bool]] = None,
            idle_timeout_minutes: Optional[pulumi.Input[int]] = None,
            ip_accesses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceIpAccessArgs']]]]] = None,
            last_updated: Optional[pulumi.Input[str]] = None,
            max_total_memory_gb: Optional[pulumi.Input[int]] = None,
            min_total_memory_gb: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_hash: Optional[pulumi.Input[str]] = None,
            private_endpoint_config: Optional[pulumi.Input[pulumi.InputType['ServicePrivateEndpointConfigArgs']]] = None,
            private_endpoint_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            region: Optional[pulumi.Input[str]] = None,
            tier: Optional[pulumi.Input[str]] = None) -> 'Service':
        """
        Get an existing Service resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.
        :param pulumi.Input[str] double_sha1_password_hash: Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.
        :param pulumi.Input[str] encryption_assumed_role_identifier: Custom role identifier arn
        :param pulumi.Input[str] encryption_key: Custom encryption key arn
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceEndpointArgs']]]] endpoints: List of public endpoints.
        :param pulumi.Input[str] iam_role: IAM role used for accessing objects in s3.
        :param pulumi.Input[bool] idle_scaling: When set to true the service is allowed to scale down to zero when idle. Always true for development services. Configurable only for 'production' services.
        :param pulumi.Input[int] idle_timeout_minutes: Set minimum idling timeout (in minutes). Available only for 'production' services. Must be greater than or equal to 5 minutes.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ServiceIpAccessArgs']]]] ip_accesses: List of IP addresses allowed to access the service.
        :param pulumi.Input[int] max_total_memory_gb: Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
        :param pulumi.Input[int] min_total_memory_gb: Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
        :param pulumi.Input[str] name: User defined identifier for the service.
        :param pulumi.Input[str] password: Password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input[str] password_hash: SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.
        :param pulumi.Input[pulumi.InputType['ServicePrivateEndpointConfigArgs']] private_endpoint_config: Service config for private endpoints
        :param pulumi.Input[Sequence[pulumi.Input[str]]] private_endpoint_ids: List of private endpoint IDs
        :param pulumi.Input[str] region: Region within the cloud provider in which the service is deployed in.
        :param pulumi.Input[str] tier: Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceState.__new__(_ServiceState)

        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["double_sha1_password_hash"] = double_sha1_password_hash
        __props__.__dict__["encryption_assumed_role_identifier"] = encryption_assumed_role_identifier
        __props__.__dict__["encryption_key"] = encryption_key
        __props__.__dict__["endpoints"] = endpoints
        __props__.__dict__["iam_role"] = iam_role
        __props__.__dict__["idle_scaling"] = idle_scaling
        __props__.__dict__["idle_timeout_minutes"] = idle_timeout_minutes
        __props__.__dict__["ip_accesses"] = ip_accesses
        __props__.__dict__["last_updated"] = last_updated
        __props__.__dict__["max_total_memory_gb"] = max_total_memory_gb
        __props__.__dict__["min_total_memory_gb"] = min_total_memory_gb
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["password_hash"] = password_hash
        __props__.__dict__["private_endpoint_config"] = private_endpoint_config
        __props__.__dict__["private_endpoint_ids"] = private_endpoint_ids
        __props__.__dict__["region"] = region
        __props__.__dict__["tier"] = tier
        return Service(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[str]:
        """
        Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter(name="doubleSha1PasswordHash")
    def double_sha1_password_hash(self) -> pulumi.Output[Optional[str]]:
        """
        Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.
        """
        return pulumi.get(self, "double_sha1_password_hash")

    @property
    @pulumi.getter(name="encryptionAssumedRoleIdentifier")
    def encryption_assumed_role_identifier(self) -> pulumi.Output[Optional[str]]:
        """
        Custom role identifier arn
        """
        return pulumi.get(self, "encryption_assumed_role_identifier")

    @property
    @pulumi.getter(name="encryptionKey")
    def encryption_key(self) -> pulumi.Output[Optional[str]]:
        """
        Custom encryption key arn
        """
        return pulumi.get(self, "encryption_key")

    @property
    @pulumi.getter
    def endpoints(self) -> pulumi.Output[Sequence['outputs.ServiceEndpoint']]:
        """
        List of public endpoints.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter(name="iamRole")
    def iam_role(self) -> pulumi.Output[str]:
        """
        IAM role used for accessing objects in s3.
        """
        return pulumi.get(self, "iam_role")

    @property
    @pulumi.getter(name="idleScaling")
    def idle_scaling(self) -> pulumi.Output[Optional[bool]]:
        """
        When set to true the service is allowed to scale down to zero when idle. Always true for development services. Configurable only for 'production' services.
        """
        return pulumi.get(self, "idle_scaling")

    @property
    @pulumi.getter(name="idleTimeoutMinutes")
    def idle_timeout_minutes(self) -> pulumi.Output[Optional[int]]:
        """
        Set minimum idling timeout (in minutes). Available only for 'production' services. Must be greater than or equal to 5 minutes.
        """
        return pulumi.get(self, "idle_timeout_minutes")

    @property
    @pulumi.getter(name="ipAccesses")
    def ip_accesses(self) -> pulumi.Output[Sequence['outputs.ServiceIpAccess']]:
        """
        List of IP addresses allowed to access the service.
        """
        return pulumi.get(self, "ip_accesses")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> pulumi.Output[str]:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter(name="maxTotalMemoryGb")
    def max_total_memory_gb(self) -> pulumi.Output[Optional[int]]:
        """
        Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.
        """
        return pulumi.get(self, "max_total_memory_gb")

    @property
    @pulumi.getter(name="minTotalMemoryGb")
    def min_total_memory_gb(self) -> pulumi.Output[Optional[int]]:
        """
        Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.
        """
        return pulumi.get(self, "min_total_memory_gb")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        User defined identifier for the service.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Password for the default user. One of either `password` or `password_hash` must be specified.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordHash")
    def password_hash(self) -> pulumi.Output[Optional[str]]:
        """
        SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.
        """
        return pulumi.get(self, "password_hash")

    @property
    @pulumi.getter(name="privateEndpointConfig")
    @_utilities.deprecated("""Please use the `private_endpoint_get_config` data source instead.""")
    def private_endpoint_config(self) -> pulumi.Output['outputs.ServicePrivateEndpointConfig']:
        """
        Service config for private endpoints
        """
        return pulumi.get(self, "private_endpoint_config")

    @property
    @pulumi.getter(name="privateEndpointIds")
    def private_endpoint_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        List of private endpoint IDs
        """
        return pulumi.get(self, "private_endpoint_ids")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        Region within the cloud provider in which the service is deployed in.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def tier(self) -> pulumi.Output[str]:
        """
        Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.
        """
        return pulumi.get(self, "tier")

