# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ServiceEndpoint',
    'ServiceIpAccess',
    'ServicePrivateEndpointConfig',
]

@pulumi.output_type
class ServiceEndpoint(dict):
    def __init__(__self__, *,
                 host: Optional[str] = None,
                 port: Optional[int] = None,
                 protocol: Optional[str] = None):
        """
        :param str host: Endpoint host.
        :param int port: Endpoint port.
        :param str protocol: Endpoint protocol: https or nativesecure
        """
        if host is not None:
            pulumi.set(__self__, "host", host)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        Endpoint host.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Endpoint port.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Endpoint protocol: https or nativesecure
        """
        return pulumi.get(self, "protocol")


@pulumi.output_type
class ServiceIpAccess(dict):
    def __init__(__self__, *,
                 source: str,
                 description: Optional[str] = None):
        """
        :param str source: IP address allowed to access the service. In case you want to set the ip_access to anywhere you should set source to 0.0.0.0/0
        :param str description: Description of the IP address.
        """
        pulumi.set(__self__, "source", source)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def source(self) -> str:
        """
        IP address allowed to access the service. In case you want to set the ip_access to anywhere you should set source to 0.0.0.0/0
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the IP address.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class ServicePrivateEndpointConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "endpointServiceId":
            suggest = "endpoint_service_id"
        elif key == "privateDnsHostname":
            suggest = "private_dns_hostname"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServicePrivateEndpointConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServicePrivateEndpointConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServicePrivateEndpointConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint_service_id: Optional[str] = None,
                 private_dns_hostname: Optional[str] = None):
        """
        :param str endpoint_service_id: Unique identifier of the interface endpoint you created in your VPC with the AWS(Service Name) or GCP(Target Service) resource
        :param str private_dns_hostname: Private DNS Hostname of the VPC you created
        """
        if endpoint_service_id is not None:
            pulumi.set(__self__, "endpoint_service_id", endpoint_service_id)
        if private_dns_hostname is not None:
            pulumi.set(__self__, "private_dns_hostname", private_dns_hostname)

    @property
    @pulumi.getter(name="endpointServiceId")
    def endpoint_service_id(self) -> Optional[str]:
        """
        Unique identifier of the interface endpoint you created in your VPC with the AWS(Service Name) or GCP(Target Service) resource
        """
        return pulumi.get(self, "endpoint_service_id")

    @property
    @pulumi.getter(name="privateDnsHostname")
    def private_dns_hostname(self) -> Optional[str]:
        """
        Private DNS Hostname of the VPC you created
        """
        return pulumi.get(self, "private_dns_hostname")


