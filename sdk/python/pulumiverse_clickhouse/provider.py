# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 api_url: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 token_key: Optional[pulumi.Input[str]] = None,
                 token_secret: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] api_url: API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
               `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
               want to run against.
        :param pulumi.Input[str] organization_id: ID of the organization the provider will create services under. Alternatively, can be configured using the
               `CLICKHOUSE_ORG_ID` environment variable.
        :param pulumi.Input[str] token_key: Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
               `CLICKHOUSE_TOKEN_KEY` environment variable.
        :param pulumi.Input[str] token_secret: Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
               `CLICKHOUSE_TOKEN_SECRET` environment variable.
        """
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if organization_id is not None:
            pulumi.set(__self__, "organization_id", organization_id)
        if token_key is not None:
            pulumi.set(__self__, "token_key", token_key)
        if token_secret is not None:
            pulumi.set(__self__, "token_secret", token_secret)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        """
        API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
        `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
        want to run against.
        """
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the organization the provider will create services under. Alternatively, can be configured using the
        `CLICKHOUSE_ORG_ID` environment variable.
        """
        return pulumi.get(self, "organization_id")

    @organization_id.setter
    def organization_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "organization_id", value)

    @property
    @pulumi.getter(name="tokenKey")
    def token_key(self) -> Optional[pulumi.Input[str]]:
        """
        Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
        `CLICKHOUSE_TOKEN_KEY` environment variable.
        """
        return pulumi.get(self, "token_key")

    @token_key.setter
    def token_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_key", value)

    @property
    @pulumi.getter(name="tokenSecret")
    def token_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
        `CLICKHOUSE_TOKEN_SECRET` environment variable.
        """
        return pulumi.get(self, "token_secret")

    @token_secret.setter
    def token_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_secret", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 token_key: Optional[pulumi.Input[str]] = None,
                 token_secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the clickhouse package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_url: API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
               `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
               want to run against.
        :param pulumi.Input[str] organization_id: ID of the organization the provider will create services under. Alternatively, can be configured using the
               `CLICKHOUSE_ORG_ID` environment variable.
        :param pulumi.Input[str] token_key: Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
               `CLICKHOUSE_TOKEN_KEY` environment variable.
        :param pulumi.Input[str] token_secret: Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
               `CLICKHOUSE_TOKEN_SECRET` environment variable.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the clickhouse package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_url: Optional[pulumi.Input[str]] = None,
                 organization_id: Optional[pulumi.Input[str]] = None,
                 token_key: Optional[pulumi.Input[str]] = None,
                 token_secret: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["api_url"] = api_url
            __props__.__dict__["organization_id"] = organization_id
            __props__.__dict__["token_key"] = token_key
            __props__.__dict__["token_secret"] = None if token_secret is None else pulumi.Output.secret(token_secret)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["tokenSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'clickhouse',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> pulumi.Output[Optional[str]]:
        """
        API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the
        `CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you
        want to run against.
        """
        return pulumi.get(self, "api_url")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the organization the provider will create services under. Alternatively, can be configured using the
        `CLICKHOUSE_ORG_ID` environment variable.
        """
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="tokenKey")
    def token_key(self) -> pulumi.Output[Optional[str]]:
        """
        Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
        `CLICKHOUSE_TOKEN_KEY` environment variable.
        """
        return pulumi.get(self, "token_key")

    @property
    @pulumi.getter(name="tokenSecret")
    def token_secret(self) -> pulumi.Output[Optional[str]]:
        """
        Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the
        `CLICKHOUSE_TOKEN_SECRET` environment variable.
        """
        return pulumi.get(self, "token_secret")

