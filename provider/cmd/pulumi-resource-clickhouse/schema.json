{
    "name": "clickhouse",
    "displayName": "Clickhouse",
    "description": "A Pulumi package for creating and managing Clickhouse Cloud resources",
    "keywords": [
        "pulumi",
        "clickhouse",
        "category/cloud"
    ],
    "homepage": "https://github.com/pulumiverse/pulumi-clickhouse",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`clickhouse` Terraform Provider](https://github.com/ClickHouse/terraform-provider-clickhouse).",
    "repository": "https://github.com/pulumiverse/pulumi-clickhouse",
    "logoUrl": "https://avatars3.githubusercontent.com/ClickHouse",
    "pluginDownloadURL": "github://api.github.com/pulumiverse/pulumi-clickhouse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-clickhouse/sdk/go/clickhouse",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "java": {
            "basePackage": "com.pulumiverse",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": "",
            "gradleTest": ""
        },
        "nodejs": {
            "packageName": "@pulumiverse/clickhouse",
            "packageDescription": "A Pulumi package for creating and managing Clickhouse Cloud resources. Based on terraform-provider-clickhouse: version v0.3.0",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ClickHouse/terraform-provider-clickhouse)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-clickhouse` repo](https://github.com/pulumiverse/pulumi-clickhouse/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-clickhouse` repo](https://github.com/ClickHouse/terraform-provider-clickhouse/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_clickhouse",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/ClickHouse/terraform-provider-clickhouse)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-clickhouse` repo](https://github.com/pulumiverse/pulumi-clickhouse/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-clickhouse` repo](https://github.com/ClickHouse/terraform-provider-clickhouse/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiUrl": {
                "type": "string",
                "description": "API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the\n`CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you\nwant to run against.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "ID of the organization the provider will create services under. Alternatively, can be configured using the\n`CLICKHOUSE_ORG_ID` environment variable.\n"
            },
            "tokenKey": {
                "type": "string",
                "description": "Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the\n`CLICKHOUSE_TOKEN_KEY` environment variable.\n"
            },
            "tokenSecret": {
                "type": "string",
                "description": "Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the\n`CLICKHOUSE_TOKEN_SECRET` environment variable.\n",
                "secret": true
            }
        }
    },
    "types": {
        "clickhouse:index/ServiceEndpoint:ServiceEndpoint": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Endpoint host.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Endpoint port.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Endpoint protocol: https or nativesecure\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "host",
                        "port",
                        "protocol"
                    ]
                }
            }
        },
        "clickhouse:index/ServiceIpAccess:ServiceIpAccess": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the IP address.\n"
                },
                "source": {
                    "type": "string",
                    "description": "IP address allowed to access the service. In case you want to set the ip_access to anywhere you should set source to 0.0.0.0/0\n"
                }
            },
            "type": "object",
            "required": [
                "source"
            ]
        },
        "clickhouse:index/ServicePrivateEndpointConfig:ServicePrivateEndpointConfig": {
            "properties": {
                "endpointServiceId": {
                    "type": "string",
                    "description": "Unique identifier of the interface endpoint you created in your VPC with the AWS(Service Name) or GCP(Target Service) resource\n"
                },
                "privateDnsHostname": {
                    "type": "string",
                    "description": "Private DNS Hostname of the VPC you created\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "endpointServiceId",
                        "privateDnsHostname"
                    ]
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the clickhouse package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiUrl": {
                "type": "string",
                "description": "API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the\n`CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you\nwant to run against.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "ID of the organization the provider will create services under. Alternatively, can be configured using the\n`CLICKHOUSE_ORG_ID` environment variable.\n"
            },
            "tokenKey": {
                "type": "string",
                "description": "Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the\n`CLICKHOUSE_TOKEN_KEY` environment variable.\n"
            },
            "tokenSecret": {
                "type": "string",
                "description": "Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the\n`CLICKHOUSE_TOKEN_SECRET` environment variable.\n",
                "secret": true
            }
        },
        "inputProperties": {
            "apiUrl": {
                "type": "string",
                "description": "API URL of the ClickHouse OpenAPI the provider will interact with. Alternatively, can be configured using the\n`CLICKHOUSE_API_URL` environment variable. Only specify if you have a specific deployment of the ClickHouse OpenAPI you\nwant to run against.\n"
            },
            "organizationId": {
                "type": "string",
                "description": "ID of the organization the provider will create services under. Alternatively, can be configured using the\n`CLICKHOUSE_ORG_ID` environment variable.\n"
            },
            "tokenKey": {
                "type": "string",
                "description": "Token key of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the\n`CLICKHOUSE_TOKEN_KEY` environment variable.\n"
            },
            "tokenSecret": {
                "type": "string",
                "description": "Token secret of the key/secret pair. Used to authenticate with OpenAPI. Alternatively, can be configured using the\n`CLICKHOUSE_TOKEN_SECRET` environment variable.\n",
                "secret": true
            }
        }
    },
    "resources": {
        "clickhouse:PrivateEndpoint/registration:Registration": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider of the private endpoint ID\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the private endpoint\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the private endpoint\n"
                }
            },
            "required": [
                "cloudProvider",
                "region"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider of the private endpoint ID\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the private endpoint\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the private endpoint\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Registration resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider of the private endpoint ID\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the private endpoint\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the private endpoint\n"
                    }
                },
                "type": "object"
            }
        },
        "clickhouse:index/service:Service": {
            "description": "## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as clickhouse from \"@pulumiverse/clickhouse\";\n\nconst service = new clickhouse.Service(\"service\", {\n    cloudProvider: \"aws\",\n    idleScaling: true,\n    idleTimeoutMinutes: 5,\n    ipAccesses: [{\n        description: \"Test IP\",\n        source: \"192.168.2.63\",\n    }],\n    maxTotalMemoryGb: 360,\n    minTotalMemoryGb: 24,\n    passwordHash: \"n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=\",\n    region: \"us-east-1\",\n    tier: \"production\",\n});\n```\n```python\nimport pulumi\nimport pulumiverse_clickhouse as clickhouse\n\nservice = clickhouse.Service(\"service\",\n    cloud_provider=\"aws\",\n    idle_scaling=True,\n    idle_timeout_minutes=5,\n    ip_accesses=[{\n        \"description\": \"Test IP\",\n        \"source\": \"192.168.2.63\",\n    }],\n    max_total_memory_gb=360,\n    min_total_memory_gb=24,\n    password_hash=\"n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=\",\n    region=\"us-east-1\",\n    tier=\"production\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Clickhouse = Pulumiverse.Clickhouse;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var service = new Clickhouse.Service(\"service\", new()\n    {\n        CloudProvider = \"aws\",\n        IdleScaling = true,\n        IdleTimeoutMinutes = 5,\n        IpAccesses = new[]\n        {\n            new Clickhouse.Inputs.ServiceIpAccessArgs\n            {\n                Description = \"Test IP\",\n                Source = \"192.168.2.63\",\n            },\n        },\n        MaxTotalMemoryGb = 360,\n        MinTotalMemoryGb = 24,\n        PasswordHash = \"n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=\",\n        Region = \"us-east-1\",\n        Tier = \"production\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-clickhouse/sdk/go/clickhouse\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := clickhouse.NewService(ctx, \"service\", \u0026clickhouse.ServiceArgs{\n\t\t\tCloudProvider:      pulumi.String(\"aws\"),\n\t\t\tIdleScaling:        pulumi.Bool(true),\n\t\t\tIdleTimeoutMinutes: pulumi.Int(5),\n\t\t\tIpAccesses: clickhouse.ServiceIpAccessArray{\n\t\t\t\t\u0026clickhouse.ServiceIpAccessArgs{\n\t\t\t\t\tDescription: pulumi.String(\"Test IP\"),\n\t\t\t\t\tSource:      pulumi.String(\"192.168.2.63\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMaxTotalMemoryGb: pulumi.Int(360),\n\t\t\tMinTotalMemoryGb: pulumi.Int(24),\n\t\t\tPasswordHash:     pulumi.String(\"n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=\"),\n\t\t\tRegion:           pulumi.String(\"us-east-1\"),\n\t\t\tTier:             pulumi.String(\"production\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.clickhouse.Service;\nimport com.pulumi.clickhouse.ServiceArgs;\nimport com.pulumi.clickhouse.inputs.ServiceIpAccessArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var service = new Service(\"service\", ServiceArgs.builder()\n            .cloudProvider(\"aws\")\n            .idleScaling(true)\n            .idleTimeoutMinutes(5)\n            .ipAccesses(ServiceIpAccessArgs.builder()\n                .description(\"Test IP\")\n                .source(\"192.168.2.63\")\n                .build())\n            .maxTotalMemoryGb(360)\n            .minTotalMemoryGb(24)\n            .passwordHash(\"n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=\")\n            .region(\"us-east-1\")\n            .tier(\"production\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  service:\n    type: clickhouse:Service\n    properties:\n      cloudProvider: aws\n      idleScaling: true\n      idleTimeoutMinutes: 5\n      ipAccesses:\n        - description: Test IP\n          source: 192.168.2.63\n      maxTotalMemoryGb: 360\n      minTotalMemoryGb: 24\n      passwordHash: n4bQgYhMfWWaL+qgxVrQFaO/TxsrC4Is0V1sFbDwCgg=\n      # base64 encoded sha256 hash of \"test\"\n      region: us-east-1\n      tier: production\n```\n\u003c!--End PulumiCodeChooser --\u003e\n\n## Import\n\nServices can be imported by specifying the UUID.\n\n```sh\n$ pulumi import clickhouse:index/service:Service example xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n```\n\n",
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.\n"
                },
                "doubleSha1PasswordHash": {
                    "type": "string",
                    "description": "Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.\n",
                    "secret": true
                },
                "encryptionAssumedRoleIdentifier": {
                    "type": "string",
                    "description": "Custom role identifier arn\n"
                },
                "encryptionKey": {
                    "type": "string",
                    "description": "Custom encryption key arn\n"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/clickhouse:index/ServiceEndpoint:ServiceEndpoint"
                    },
                    "description": "List of public endpoints.\n"
                },
                "iamRole": {
                    "type": "string",
                    "description": "IAM role used for accessing objects in s3.\n"
                },
                "idleScaling": {
                    "type": "boolean",
                    "description": "When set to true the service is allowed to scale down to zero when idle.\n"
                },
                "idleTimeoutMinutes": {
                    "type": "integer",
                    "description": "Set minimum idling timeout (in minutes). Must be greater than or equal to 5 minutes. Must be set if idle_scaling is enabled\n"
                },
                "ipAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/clickhouse:index/ServiceIpAccess:ServiceIpAccess"
                    },
                    "description": "List of IP addresses allowed to access the service.\n"
                },
                "maxTotalMemoryGb": {
                    "type": "integer",
                    "description": "Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.\n"
                },
                "minTotalMemoryGb": {
                    "type": "integer",
                    "description": "Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User defined identifier for the service.\n"
                },
                "numReplicas": {
                    "type": "integer",
                    "description": "Number of replicas for the service. Available only for 'production' services. Must be between 3 and 20. Contact support to enable this feature.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the default user. One of either `password` or `password_hash` must be specified.\n",
                    "secret": true
                },
                "passwordHash": {
                    "type": "string",
                    "description": "SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.\n",
                    "secret": true
                },
                "privateEndpointConfig": {
                    "$ref": "#/types/clickhouse:index/ServicePrivateEndpointConfig:ServicePrivateEndpointConfig",
                    "description": "Service config for private endpoints\n",
                    "deprecationMessage": "Please use the `clickhouse.PrivateEndpoint.getConfig` data source instead."
                },
                "privateEndpointIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of private endpoint IDs\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region within the cloud provider in which the service is deployed in.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.\n"
                }
            },
            "required": [
                "cloudProvider",
                "endpoints",
                "iamRole",
                "ipAccesses",
                "name",
                "privateEndpointConfig",
                "privateEndpointIds",
                "region",
                "tier"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.\n"
                },
                "doubleSha1PasswordHash": {
                    "type": "string",
                    "description": "Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.\n",
                    "secret": true
                },
                "encryptionAssumedRoleIdentifier": {
                    "type": "string",
                    "description": "Custom role identifier arn\n"
                },
                "encryptionKey": {
                    "type": "string",
                    "description": "Custom encryption key arn\n"
                },
                "idleScaling": {
                    "type": "boolean",
                    "description": "When set to true the service is allowed to scale down to zero when idle.\n"
                },
                "idleTimeoutMinutes": {
                    "type": "integer",
                    "description": "Set minimum idling timeout (in minutes). Must be greater than or equal to 5 minutes. Must be set if idle_scaling is enabled\n"
                },
                "ipAccesses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/clickhouse:index/ServiceIpAccess:ServiceIpAccess"
                    },
                    "description": "List of IP addresses allowed to access the service.\n"
                },
                "maxTotalMemoryGb": {
                    "type": "integer",
                    "description": "Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.\n"
                },
                "minTotalMemoryGb": {
                    "type": "integer",
                    "description": "Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User defined identifier for the service.\n"
                },
                "numReplicas": {
                    "type": "integer",
                    "description": "Number of replicas for the service. Available only for 'production' services. Must be between 3 and 20. Contact support to enable this feature.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the default user. One of either `password` or `password_hash` must be specified.\n",
                    "secret": true
                },
                "passwordHash": {
                    "type": "string",
                    "description": "SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.\n",
                    "secret": true
                },
                "privateEndpointIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of private endpoint IDs\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region within the cloud provider in which the service is deployed in.\n"
                },
                "tier": {
                    "type": "string",
                    "description": "Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "ipAccesses",
                "region",
                "tier"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud provider ('aws', 'gcp', or 'azure') in which the service is deployed in.\n"
                    },
                    "doubleSha1PasswordHash": {
                        "type": "string",
                        "description": "Double SHA1 hash of password for connecting with the MySQL protocol. Cannot be specified if `password` is specified.\n",
                        "secret": true
                    },
                    "encryptionAssumedRoleIdentifier": {
                        "type": "string",
                        "description": "Custom role identifier arn\n"
                    },
                    "encryptionKey": {
                        "type": "string",
                        "description": "Custom encryption key arn\n"
                    },
                    "endpoints": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/clickhouse:index/ServiceEndpoint:ServiceEndpoint"
                        },
                        "description": "List of public endpoints.\n"
                    },
                    "iamRole": {
                        "type": "string",
                        "description": "IAM role used for accessing objects in s3.\n"
                    },
                    "idleScaling": {
                        "type": "boolean",
                        "description": "When set to true the service is allowed to scale down to zero when idle.\n"
                    },
                    "idleTimeoutMinutes": {
                        "type": "integer",
                        "description": "Set minimum idling timeout (in minutes). Must be greater than or equal to 5 minutes. Must be set if idle_scaling is enabled\n"
                    },
                    "ipAccesses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/clickhouse:index/ServiceIpAccess:ServiceIpAccess"
                        },
                        "description": "List of IP addresses allowed to access the service.\n"
                    },
                    "maxTotalMemoryGb": {
                        "type": "integer",
                        "description": "Maximum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and lower than 360 for non paid services or 720 for paid services.\n"
                    },
                    "minTotalMemoryGb": {
                        "type": "integer",
                        "description": "Minimum total memory of all workers during auto-scaling in Gb. Available only for 'production' services. Must be a multiple of 12 and greater than 24.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User defined identifier for the service.\n"
                    },
                    "numReplicas": {
                        "type": "integer",
                        "description": "Number of replicas for the service. Available only for 'production' services. Must be between 3 and 20. Contact support to enable this feature.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password for the default user. One of either `password` or `password_hash` must be specified.\n",
                        "secret": true
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "SHA256 hash of password for the default user. One of either `password` or `password_hash` must be specified.\n",
                        "secret": true
                    },
                    "privateEndpointConfig": {
                        "$ref": "#/types/clickhouse:index/ServicePrivateEndpointConfig:ServicePrivateEndpointConfig",
                        "description": "Service config for private endpoints\n",
                        "deprecationMessage": "Please use the `clickhouse.PrivateEndpoint.getConfig` data source instead."
                    },
                    "privateEndpointIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of private endpoint IDs\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region within the cloud provider in which the service is deployed in.\n"
                    },
                    "tier": {
                        "type": "string",
                        "description": "Tier of the service: 'development', 'production'. Production services scale, Development are fixed size.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "clickhouse:PrivateEndpoint/getConfig:getConfig": {
            "inputs": {
                "description": "A collection of arguments for invoking getConfig.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "The cloud provider for the private endpoint. Valid values are 'aws', 'gcp', or 'azure'.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the private endpoint. Valid values are specific to the cloud provider i.e. us-east-2\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "region"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getConfig.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "The cloud provider for the private endpoint. Valid values are 'aws', 'gcp', or 'azure'.\n"
                    },
                    "endpointServiceId": {
                        "type": "string",
                        "description": "The ID of the private endpoint that is used to securely connect to ClickHouse. This is a read-only attribute.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The region for the private endpoint. Valid values are specific to the cloud provider i.e. us-east-2\n"
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "endpointServiceId",
                    "region",
                    "id"
                ]
            }
        }
    }
}